'CR1000 Series Datalogger
'Author: Juan Luis Herrera Cortijo/Jose Gonzalez/Ramiro Varela
'Date: 13/09/2011

'Disclaimer: IMPORTANT:  This GOFUVI software is supplied to you by GOFUVI
' in consideration of your agreement to the following
' terms, and your use, installation, modification or redistribution of
' this GOFUVI software constitutes acceptance of these terms.  If you do
' not agree with these terms, please do not use, install, modify or
' redistribute this GOFUVI software.

'The GOFUVI software is provided by GOFUVI on an "AS IS" basis.  GOFUVI
'MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION
'THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS
'FOR A PARTICULAR PURPOSE, REGARDING THE GOFUVI SOFTWARE OR ITS USE AND
'OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS.

'IN NO EVENT SHALL GOFUVI BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL
'OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
'SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
'INTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION,
'MODIFICATION AND/OR DISTRIBUTION OF THE GOFUVI SOFTWARE, HOWEVER CAUSED
'AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE),
'STRICT LIABILITY OR OTHERWISE, EVEN IF GOFUVI HAS BEEN ADVISED OF THE
'POSSIBILITY OF SUCH DAMAGE.

'Copyright (c) 2011 GOFUVI. All rights reserved.


'--------------------------------------------------------------------------------------------
'WIRING

'GPS communications -> Any comport (here set to Com1)
'Control on/off GPS -> A control port from C1 to C8 (Here set to C7)
'


'--------------------------------------------------------------------------------------------

'COMPILATION OPTIONS

'Program compiled in sequential mode
SequentialMode

'Angles in degrees
AngleDegrees

'--------------------------------------------------------------------------------------------

'VARIABLES AND constANTS

'constants
'----------

'Sampling interval cycle: defines the length of your whole sampling cycle. All the times in the program shoudl be in the same units that this one.

const sampleIntervalCycle = 600
const sampleIntervalCycleUnits = Sec

'General

const PI = 3.141592654
const oneRepetition=1
const noValues=0
const oneValue=1
const unityMultiplier=1
const noOffset=0


'Scan length

Const scanLength = 600'Define your scan length
Const scanLengthUnits = Sec'Define the units of the length of your scan

'Transmitted data computing interval (Must be greater or equal to the scan length and some multiple of the scan length)

const dataStorageInterval = 600
const dataTableCallTime = 240 ' At this moment the data table will be called and longitude and latitude variables will be reset.


'GPS

'Communications and control

const GPSCommPort = Com1 'set this to the port where you have connected your GPS.
const GPSControlPort = 7 'set this to the value of the port where you are conecting the GPS wire control (Here set to C7)
const GPSCommPortBaudRate = 9600 'set this to the baud rate of your GPS
const GPSStartTime =  540 'set this for the moment in your sampling cycle in which the GPS is turned on
Const GPSShutDownTime = 240 'set this for the moment in your sampling cycle in which the GPS is turned off

'Alert
const areAlertsActivated = true 'set this to false if no alert service is desired.
Const phoneNumber = "00000000" 'Introduce the phone number to which alert SMS will be sent
const GPSAlertCheckTime = 240 'Set this to the moment in which you want to check if the station has been off the mooring area during all the sampling cycle interval.
const ModemPort =  ComRS232 'Port where a GSM modem is located to send the alert message via SMS
Const dataCenterIP = "127.0.0.1" 'set this to the IP of your datacenter (set the IP in a string)
Const dataCenterTCPPort = 0 'set this to the port in your dataCenter computer in which the station should connect for callback.

'Longitudee/Latitude to UTM conversion constants
const UTM_k0=0.9996

'WGS84 ellipsoid parameters
const UTM_radio=6378137
const UTM_ecc=0.00669438

'Theoretical mooring location
Const mooringLocationLongitude= 0.0 'Set the Longitudee of your mooring location (decimal degrees)
Const mooringLocationLatitude= 0.0 'Set the Latitudee of your mooring location (decimal degrees)

Const maximumDistance= 100 'Set the radium of the mooring area (meters)
 

'Variables
'----------

'GPS control
dim GPSOn As Boolean

'GPS fix acquisition intermediate variables
dim GPSData As String * 100
dim RawGGAStrings(6) As String * 10
dim RawGGAData(6)

alias RawGGAData(1)=Latt
units Latt=Deg

alias RawGGAData(2)=Latt_H_NS
alias RawGGAData(3)=Longit
units Longit=Deg

alias RawGGAData(4)=Longit_H_NS
alias RawGGAData(5)=GGA_UTC_Time
alias RawGGAData(6)=GPSQuality

public GPSArray(4)
public H_GPS(2) As String * 1

alias GPSArray(1) = GPS_Time_UTC
alias GPSArray(2) = Longitude
units Longitude=Deg

alias GPSArray(3) = Latitude
units Latitude=Deg

alias GPSArray(4) = fixQuality

alias H_GPS(1) = longitudeHemisphere
alias H_GPS(2) = latitudeHemisphere

dim ok

Dim rTime(9)


'Alert service related variables

dim LongOrigin, LongTemp,LatRad,LongRad,LongOriginRad
dim offMooringLocationAlert As Boolean

public UTMDistance
units UTMDistance = m

dim alertMessageSent
dim UTMZone,UTM_N,UTM_T,UTM_C,UTM_A,UTM_M,UTM_eccprime
dim UTMMooringLocationX,UTMMooringLocationY,UTMLocationX,UTMLocationY

dim alertMessage As String *255
dim alertDate As String * 20


'--------------------------------------------------------------------------------------------

'DEFINE DATA TABLES

DataTable (Data,1,-1)
	DataInterval (0,dataStorageInterval,sampleIntervalCycleUnits,0)

		Sample(1,UTMDistance,IEEE4)

		Sample(4,GPSArray(),IEEE4)

		Sample(2,H_GPS(),String)
EndTable

'--------------------------------------------------------------------------------------------
'MAIN PROGRAM

BeginProg


'''''''''''''''''''''''''''''''''''GPS''''''''''''''''''''''''''''
'Alert flag is set low

offMooringLocationAlert=False

'UTM coordinates are computed for the theoretical mooring location

Latitude=mooringLocationLatitude
Longitude=mooringLocationLongitude

LongTemp=((Longitude+180)-FIX((Longitude+180)/360)*360-180)*-1

UTMZone=FIX((LongTemp+180)/6)+1

If ((Latitude>=56) AND (Latitude<64) AND (Longtemp >= 3) AND (Longtemp<12)) Then
	UTMZone=32
EndIf

LongOrigin=(UTMZone-1)*6-180+3
UTM_eccprime=(UTM_ecc)/(1-UTM_ecc)
UTM_N=UTM_Radio/SQR(1-UTM_ecc*SIN(Latitude)*SIN(Latitude))
UTM_T=TAN(Latitude)*TAN(Latitude)
UTM_C=UTM_eccprime*COS(Latitude)*COS(Latitude)
UTM_A=COS(Latitude)*(Longtemp*pi/180-LongOrigin*pi/180)
UTM_M=UTM_Radio*((1-UTM_ecc/4-3*UTM_ecc^2/64-5*UTM_ecc^3/256)*Latitude*pi/180-(3*UTM_ecc/8+3*UTM_ecc^2/32+45*UTM_ecc^3/1024)*SIN(2*Latitude)+(15*UTM_ecc^2/256+45*UTM_ecc^3/1024)*SIN(4*Latitude)-(35*UTM_ecc^3/3072)*SIN(6*Latitude))

UTMMooringLocationX=(UTM_k0*UTM_N*(UTM_A+(1-UTM_T+UTM_C)*UTM_A^3/6+(5-18*UTM_T+UTM_T^2+72*UTM_C-58*UTM_eccprime)*UTM_A^5/120)+500000)
UTMMooringLocationY=(UTM_k0*(UTM_M+UTM_N*TAN(Latitude)*(UTM_A^2/2+(5-UTM_T+9*UTM_C+4*UTM_C^2)*UTM_A^4/24+(61-58*UTM_T+UTM_T^2+600*UTM_C-330*UTM_eccprime)*UTM_A^6/720)))

'Initalize longitude and latitude to no valid values
Longitude=-99999
Latitude=-99999

'Switch the GPS control port to start receiving fixes.
PortSet(GPSControlPort,0)

'Open the GPS comport to start receiving data.
SerialOpen (GPSCommPort,GPSCommPortBaudRate,0,0,2000)

'Set a flag for GPS on
GPSOn=True 
''''''''''''''''''''''''''''''End GPS'''''''''''''''''''''''''''''


Scan(scanLength,sampleIntervalCycleUnits,0,0)

'
		If IfTime(GPSStartTime,sampleIntervalCycle,sampleIntervalCycleUnits) Then
			PortSet(GPSControlPort,0)
			GPSOn=True
		EndIf
		If GPSOn Then
		
			' While a $GPGLL string is not found and it's a valid fiz and still there are data in the GPSCommPort, continue reading.
			While (SerialInChk (GPSCommPort) >0) AND  (ok = 0)
				SerialIn (GPSData,GPSCommPort,0,"$GPGLL,",100)
				SerialIn (GPSData,GPSCommPort,0,13,100)
				SplitStr (RawGGAData(),GPSData,CHR(44),6,5)
				SplitStr (RawGGAStrings(),GPSData,CHR(44),6,5)
				ok=InStr (1,RawGGAStrings(6),"A",2)
			Wend
			'Flush the GPS comm port
			SerialFlush (GPSCommPort)
			If (ok>0) Then 'A valid $GPGLL string has been found. Then extract the longitude and latitude
				GPS_Time_UTC=GGA_UTC_Time
				longitudeHemisphere=RawGGAStrings(4)
				latitudeHemisphere=RawGGAStrings(2)
				Longitude=FIX(Longit/100)+(Longit-FIX(Longit/100)*100)/60
				Latitude=FIX(Latt/100)+(Latt-FIX(Latt/100)*100)/60
				fixQuality=1
				ok=0
				
				if (areAlertsActivated) then 'The alert service is activated
				
					'Convert longitude and latitude to UTM coordinates

					LongTemp=((Longitude+180)-FIX((Longitude+180)/360)*360-180)*-1
					UTMZone=FIX((LongTemp+180)/6)+1
					If ((Latitude>=56) AND (Latitude<64) AND (Longtemp >= 3) AND (Longtemp<12)) Then
						UTMZone=32
					EndIf
					LongOrigin=(UTMZone-1)*6-180+3
					UTM_eccprime=(UTM_ecc)/(1-UTM_ecc)
					UTM_N=UTM_Radio/SQR(1-UTM_ecc*SIN(Latitude)*SIN(Latitude))
					UTM_T=TAN(Latitude)*TAN(Latitude)
					UTM_C=UTM_eccprime*COS(Latitude)*COS(Latitude)
					UTM_A=COS(Latitude)*(Longtemp*pi/180-LongOrigin*pi/180)
				
									UTM_M=UTM_Radio*((1-UTM_ecc/4-3*UTM_ecc^2/64-5*UTM_ecc^3/256)*Latitude*pi/180-(3*UTM_ecc/8+3*UTM_ecc^2/32+45*UTM_ecc^3/1024)*SIN(2*Latitude)+(15*UTM_ecc^2/256+45*UTM_ecc^3/1024)*SIN(4*Latitude)-(35*UTM_ecc^3/3072)*SIN(6*Latitude))
				UTMLocationX=(UTM_k0*UTM_N*(UTM_A+(1-UTM_T+UTM_C)*UTM_A^3/6+(5-18*UTM_T+UTM_T^2+72*UTM_C-58*UTM_eccprime)*UTM_A^5/120)+500000)
				UTMLocationY=(UTM_k0*(UTM_M+UTM_N*TAN(Latitude)*(UTM_A^2/2+(5-UTM_T+9*UTM_C+4*UTM_C^2)*UTM_A^4/24+(61-58*UTM_T+UTM_T^2+600*UTM_C-330*UTM_eccprime)*UTM_A^6/720)))

				UTMDistance=SQR((UTMLocationX-UTMMooringLocationX)^2+(UTMLocationY-UTMMooringLocationY)^2)
				'If we are into the mooring area, then set the alert flag to false.
				If UTMDistance < maximumDistance Then
					offMooringLocationAlert=False
				EndIf
				fixQuality=1
				ok=0
				
				EndIf
			EndIf
		EndIf
		If IfTime (dataTableCallTime,sampleIntervalCycle,sampleIntervalCycleUnits)   Then

			CallTable Data
			
			Longitude=-99999
			Latitude=-99999
			fixQuality=0
		EndIf


		If IfTime (GPSAlertCheckTime,sampleIntervalCycle,sampleIntervalCycleUnits) Then
			If  (offMooringLocationAlert)  Then
				RealTime(rTime)
				SerialOpen(ModemPort,9600,0,20000,1000)
				SerialOut(ModemPort,"+++","+++",3,200)	'Get the modem's attention
				Delay(0,1,sec)	'+++ guard time
				SerialOut(ModemPort,"ATZ"+CHR(13),"0"+CHR(13),3,100) 'Reset to be sure
			
			'Set the date of the alert
			alertDate=FormatFloat(rTime(1),"%4.0f")+"/"+FormatFloat(rTime(2),"%02.0f")+"/"+FormatFloat(rTime(3),"%02.0f")+" "+FormatFloat(rTime(4),"%02.0f")+":"+FormatFloat(rTime(5),"%02.0f")+":"+FormatFloat(rTime(6),"%02.0f")
			
				'Set the alert message
				alertMessage=alertDate+": Station at "+FormatFloat(Floor(UTMDistance),"%6.0f")+" meters from the mooring point. Last NMEA message:"+GPSData
					alertMessageSent=SerialOut(Modemport,"AT+CMGS="+CHR(34)+phoneNumber+CHR(34)+CHR(13)+alertMessage+CHR(26),"0"+CHR(13),1,5000)
				Delay(0,2,Sec)
				SerialOut(Modemport,"AT+WIND=255"+CHR(13),"0"+CHR(13),1,200) 'Turn on the highest level of status reporting WAVECOM Specific
				SerialOut(Modemport,"at+cfun=1"+CHR(13),"+WIND: 4",1,5000)	'Issue the soft reset command and wait until fully online (WIND: 4)
				SerialClose(Modemport) '

				Delay(0,30,sec)
				
				TCPOpen(dataCenterIP,dataCenterTCPPort,0)


			EndIf


			offMooringLocationAlert=True
		
		EndIf
		
		If IfTime (GPSShutDownTime,sampleIntervalCycle,sampleIntervalCycleUnits)   Then 'Turn the GPS off
			PortSet(GPSControlPort,1) 
			GPSOn=False
		EndIf
		


NextScan
